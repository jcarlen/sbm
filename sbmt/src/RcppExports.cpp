// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sbmFit
List sbmFit(const IntegerMatrix& edgelist, const int maxComms, const int degreeCorrect, const bool directed, const int klPerNetwork, const NumericVector weights, const long double tolerance);
RcppExport SEXP _sbm_sbmFit(SEXP edgelistSEXP, SEXP maxCommsSEXP, SEXP degreeCorrectSEXP, SEXP directedSEXP, SEXP klPerNetworkSEXP, SEXP weightsSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const int >::type maxComms(maxCommsSEXP);
    Rcpp::traits::input_parameter< const int >::type degreeCorrect(degreeCorrectSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const int >::type klPerNetwork(klPerNetworkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const long double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(sbmFit(edgelist, maxComms, degreeCorrect, directed, klPerNetwork, weights, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// sbmtFit
List sbmtFit(SEXP edgelistTime, const int maxComms, const bool directed, const int klPerNetwork, const int degreeCorrect, const int nodes, const long double tolerance);
RcppExport SEXP _sbm_sbmtFit(SEXP edgelistTimeSEXP, SEXP maxCommsSEXP, SEXP directedSEXP, SEXP klPerNetworkSEXP, SEXP degreeCorrectSEXP, SEXP nodesSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type edgelistTime(edgelistTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxComms(maxCommsSEXP);
    Rcpp::traits::input_parameter< const bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const int >::type klPerNetwork(klPerNetworkSEXP);
    Rcpp::traits::input_parameter< const int >::type degreeCorrect(degreeCorrectSEXP);
    Rcpp::traits::input_parameter< const int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const long double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(sbmtFit(edgelistTime, maxComms, directed, klPerNetwork, degreeCorrect, nodes, tolerance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sbm_sbmFit", (DL_FUNC) &_sbm_sbmFit, 7},
    {"_sbm_sbmtFit", (DL_FUNC) &_sbm_sbmtFit, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_sbm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
